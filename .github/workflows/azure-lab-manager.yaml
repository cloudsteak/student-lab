################################################
# Azure Lab Manager - Terraform Workflow fow Microsoft Azure0
# This workflow is used to manage Azure labs using Terraform
# It is designed to be triggered manually via the GitHub Actions API
# It supports the following actions: apply, destroy
# It requires the following secrets: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID
# It requires the following environment variables: AZURE_REGION
################################################

name: Azure Lab Manager

env:
  TERRAFORM_VERSION: 1.11.0
  AZURE_CLI_VERSION: 2.65.0

on:
  workflow_dispatch: # Allows manual trigger via API
    inputs:
      lab:
        description: "Lab name"
        type: choice
        options:
          - "ai-basic"
          - "basic"
          - "cloudshell-cli"
          - "cloudshell-powershell"
          - "vnet-basic"
          - "vm-linux"
          - "vm-windows"
          - "vm-nlb"
          - "vm-vmss"
          - "mk-7-01-portal"
          - "mk-7-01-vm"
          - "mk-7-01-lb"
          - "mk-7-01-vmss"
          - "mk-7-01-az-cli"
          - "mk-7-01-az-ps"
        required: true
        default: "basic"
      directory:
        description: "Lab directory name"
        type: choice
        options:
          - "basic"
        required: true
        default: "basic"
      action:
        description: "Terraform action"
        type: choice
        options:
          - "apply"
          - "destroy"
        required: true
        default: "apply"
      student_username:
        description: "Unique student username"
        required: true
      student_password:
        description: "Unique student password"
        required: true

jobs:
  terraform:
    name: ${{ github.event.inputs.action }} - azure - ${{ github.event.inputs.student_username }}
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure Azure Credentials
        id: azure-login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Set up Terraform
        id: setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ github.workspace }}/azure/labs/${{ github.event.inputs.lab }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TERRAFORM_VERSION: ${{ env.TERRAFORM_VERSION }}
        run: |
          terraform init -reconfigure \
            -backend-config=resource_group_name=${{ vars.TF_AZURE_RG_NAME }} \
            -backend-config=storage_account_name=${{ vars.TF_AZURE_SA_NAME}} \
            -backend-config=container_name=${{ vars.TF_AZURE_CONTAINER_NAME }} \
            -backend-config=key=${{ github.event.inputs.student_username }}/terraform.tfstate \
            -var='tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
            -var='subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}'

      - name: Terraform Apply
        id: apply
        working-directory: ${{ github.workspace }}/azure/labs/${{ github.event.inputs.lab }}
        if: github.event.inputs.action == 'apply'
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TERRAFORM_VERSION: ${{ env.TERRAFORM_VERSION }}
        run: |
          # Apply Terraform configuration
          terraform apply -auto-approve \
            -var='tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
            -var='subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
            -var='student_username=${{ github.event.inputs.student_username }}' \
            -var='student_password=${{ github.event.inputs.student_password }}' \
            -var='location=${{ vars.AZURE_REGION }}'

      - name: Set lab status output
        id: status
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Clear Azure CLI cache
        run: rm -rf ~/.azure
        
      - name: Azure CLI script
        id: azure-cli
        if: |
          github.event.inputs.action == 'destroy' &&
          (github.event.inputs.lab == 'mk-7-01-az-cli' ||
           github.event.inputs.lab == 'mk-7-01-az-ps')
        uses: azure/cli@v2
        with:
          azcliversion: ${{ env.AZURE_CLI_VERSION }}
          inlineScript: |
            echo "Deleting all VMs in $rg..."
            az vm list -g "$rg" --query "[].name" -o tsv | \
            xargs -I {} az vm delete -g "$rg" -n {} --yes || true

            echo "Deleting all Public IPs in $rg..."
            az network public-ip list -g "$rg" --query "[].name" -o tsv | \
            xargs -I {} az network public-ip delete -g "$rg" -n {} || true  

            echo "Deleting all NICs in $rg..."
            az network nic list -g "$rg" --query "[].name" -o tsv | \
            xargs -I {} az network nic delete -g "$rg" -n {} || true 

      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy'
        uses: nick-fields/retry@v3
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TERRAFORM_VERSION: ${{ env.TERRAFORM_VERSION }}
        with:
          max_attempts: 3
          timeout_minutes: 30
          retry_wait_seconds: 15
          command: |
            # Go to the lab directory
            cd ${{ github.workspace }}/azure/labs/${{ github.event.inputs.lab }}
            # Destroy Terraform-managed infrastructure
            terraform destroy -auto-approve \
              -var='tenant_id=${{ secrets.AZURE_TENANT_ID }}' \
              -var='subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' \
              -var='student_username=${{ github.event.inputs.student_username }}' \
              -var='student_password=${{ github.event.inputs.student_password }}' \
              -var='location=${{ vars.AZURE_REGION }}'
        

  notify-backend:
    name: Notify backend when lab is ready
    needs: terraform
    if: github.event.inputs.action == 'apply'
    uses: cloudsteak/student-lab/.github/workflows/lab-ready-callback.yml@main
    with:
      student_username: ${{ github.event.inputs.student_username }}
      status: ${{ needs.terraform.outputs.status }}
    secrets:
      AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
