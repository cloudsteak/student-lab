################################################
# AWS Lab Manager - Terraform Workflow fow Amazon Web Services (AWS)
# This workflow is used to manage AWS labs using Terraform
# It is designed to be triggered manually via the GitHub Actions API
# It supports the following actions: apply, destroy
# It requires the following secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
# It requires the following environment variables: AWS_REGION, TF_STATE_BUCKET
################################################

name: AWS Lab Manager

env:
  TERRAFORM_VERSION: 1.11.0

on:
  workflow_dispatch: # Allows manual trigger via API
    inputs:
      lab:
        description: "Lab name"
        type: choice
        options:
          - "basic"
        required: true
        default: "basic"
      action:
        description: "Terraform action"
        type: choice
        options:
          - "apply"
          - "destroy"
        required: true
        default: "apply"
      student_username:
        description: "Unique student username"
        required: true
      student_password:
        description: "Unique student password"
        required: true

jobs:
  terraform:
    name: ${{ github.event.inputs.action }} - aws - ${{ github.event.inputs.student_username }}
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS CLI
        id: verify-cli
        run: aws s3 ls

      - name: Set up Terraform
        id: setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ github.workspace }}/aws/labs/${{ github.event.inputs.lab }}
        run: |
          terraform init -reconfigure \
            -backend-config=bucket=${{ vars.TF_STATE_BUCKET }} \
            -backend-config=key=labs/${{ github.event.inputs.student_username }}/terraform.tfstate \
            -backend-config=region=${{ vars.AWS_REGION }} \
            -backend-config=encrypt=true \
            -backend-config=use_lockfile=true

      - name: Terraform Apply
        id: apply
        working-directory: ${{ github.workspace }}/aws/labs/${{ github.event.inputs.lab }}
        if: github.event.inputs.action == 'apply'
        continue-on-error: true
        run: |
          # Apply Terraform configuration
          terraform apply -auto-approve -var='student_username=${{ github.event.inputs.student_username }}'
          sleep 15
          # Update IAM user password
          aws iam update-login-profile \
            --user-name ${{ github.event.inputs.student_username }} \
            --password "${{ github.event.inputs.student_password }}" \
            --no-password-reset-required

      - name: Set lab status output
        id: status
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ github.workspace }}/aws/labs/${{ github.event.inputs.lab }}
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy -auto-approve -var='student_username=${{ github.event.inputs.student_username }}'

  notify-backend:
    name: Notify backend when lab is ready
    needs: terraform
    if: github.event.inputs.action == 'apply'
    uses: cloudsteak/student-lab/.github/workflows/lab-ready-callback.yml@main
    with:
      student_username: ${{ github.event.inputs.student_username }}
      status: ${{ needs.terraform.outputs.status }}
    secrets:
      AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
